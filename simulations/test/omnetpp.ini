[General]
network = Net80211test
#record-eventlog = true
#eventlog-message-detail-pattern = *:(not declaredOn(cMessage) and not declaredOn(cNamedObject) and not declaredOn(cObject))

num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2
#debug-on-errors = true

tkenv-plugin-path = ../../../etc/plugins

**.statistic-recording = false
**.scalar-recording = false
**.vector-recording = false

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 5000m
**.constraintAreaMaxY = 5000m
**.constraintAreaMaxZ = 0m

# mobility
**.host*.mobilityType = "MassMobility"
**.host*.mobility.initFromDisplayString = false
**.host*.mobility.changeInterval = truncnormal(2s, 0.5s)
**.host*.mobility.changeAngleBy = normal(0deg, 30deg)
**.host*.mobility.speed = truncnormal(20mps, 8mps)
**.host*.mobility.updateInterval = 100ms

# ping app (host[0] pinged by others)
#*.host[0].numPingApps = 0
#*.host[*].numPingApps = 2
#*.host[*].pingApp[*].destAddr = "host[0]"
#**.pingApp[0].startTime = uniform(1s,5s)
#**.pingApp[1].startTime = 5s+uniform(1s,5s)
#**.pingApp[*].printPing = true

*.host[*].numUdpApps = 2
*.host[*].udpApp[0].typename = "UDPStatisticsApp"

**.udpApp[0].localPort = 100
**.udpApp[0].destPort = 100
**.udpApp[0].messageLength = 1024B
**.udpApp[0].sendInterval = 2s
**.udpApp[0].destAddresses = "255.255.255.255"
**.udpApp[0].chooseDestAddrMode = "perBurst"
**.udpApp[0].burstDuration = 100000s
**.udpApp[0].sleepDuration = truncnormal(1s, 0.1s)
**.udpApp[0].startTime = truncnormal(5s, 1s)
#**.udpApp[0].sleepDuration = 1s
#**.udpApp[0].startTime = 2s
#**.udpApp[0].stopTime = 10000s
#**.udpApp[0].delayLimit = 3s

*.host[*].udpApp[1].typename = "UDPBasicBurstExt"
**.udpApp[1].localPort = 200
**.udpApp[1].destPort = 200
**.udpApp[1].messageLength = 1250B
**.udpApp[1].sendInterval = 0.5s
#**.udpApp[1].destAddresses = moduleListByNedType("inet.node.inet.AdhocHost")
**.udpApp[1].destAddresses = moduleListByPath("Net80211test.host[*]")
#**.udpApp[1].destAddresses = "Net80211test.host[0]"
**.udpApp[1].chooseDestAddrMode = "perBurst"
**.udpApp[1].burstDuration = 1000000s
**.udpApp[1].sleepDuration = truncnormal(10s, 0.1s)
**.udpApp[1].startTime = truncnormal(10s, 1s)

**.udpApp[*].stopTime = 100000s
**.udpApp[*].delayLimit = 3s


#*.host[*].udpApp[1].typename = "UDPStatisticsSink"
#*.host[*].udpApp[1].localPort = 200

**.host[*].networkLayerType = "IPv4ExtNetworkLayer"
**.host[*].udpType = "UDPExt"

**.ip.forceBroadcast = true

#*.host[*].udpApp[*].destPort = 80
#*.host[*].udpApp[*].destAddresses =  "10.0.1.255"
#*.host[*].udpApp[*].packetName = "WWW"
#*.host[*].udpApp[*].startTime = 1s
#*.host[*].udpApp[*].stopTime = 5000s
#*.host[*].udpApp[*].messageLength = 1000B
#*.host[*].udpApp[*].sendInterval = 1s

# nic settings
**.wlan[*].opMode = "g"
**.wlan[*].bitrate = 54Mbps

**.wlan[*].mgmt.frameCapacity = 10

**.wlan[*].macType = "Ieee80211MacExt"
**.wlan[*].mgmtType = "Ieee80211MgmtAdhocExt"

#**.wlan[*].mac.upperMac.typename = "DcfUpperMacExt"

**.wlan[*].mac.address = "auto"
**.wlan[*].mac.maxQueueSize = 14
**.wlan[*].mac.rtsThresholdBytes = 3000B
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.cwMinData = 7
**.wlan[*].mac.cwMinBroadcast = 31

**.wlan[*].radio.receiverType = "Ieee80211ScalarReceiverExt"

**.wlan[*].radio.transmitter.power = 100mW
**.wlan[*].radio.receiver.sensitivity = -85dBm
**.wlan[*].radio.receiver.snirThreshold = 4dB

[Config TestCheck]
description = "TestCheck"

repeat = 1
sim-time-limit = 3600s

*.numHosts = 100

**.udpApp[0].startTime = truncnormal(5s, 1s)
**.udpApp[0].sendInterval = 2s

**.udpApp[1].messageLength = uniform(512B,51200B)
**.udpApp[1].sendInterval = uniform(0.1s,2s)
**.udpApp[1].startTime = truncnormal(10s, 2s)

**.routerType = "${RT2=AODVRouter}"

**.wlan[*].radio.transmitter.power = 100mW

output-vector-file = ${resultdir}/${configname}/${RT2}/${configname}-${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}/${RT2}/${configname}-${runnumber}.sca

#**.udpApp[0].fileStat = ${FS="${resultdir}/${configname}/AODVRouter/${NH}-${ML}-${SI}-${TP}-${runnumber}.data", "${resultdir}/${configname}/GPSRRouter/${NH}-${ML}-${SI}-${TP}-${runnumber}.data" ! RT} 
**.udpApp[0].fileStat = "${resultdir}/${configname}/${RT2}/${configname}-${runnumber}.data"


[Config TestBase]
description = "TestBase"

repeat = 3
sim-time-limit = 3600s

##### SCENARIO variables
*.numHosts = ${NH=5,10,15,20,25,50,75,100,150,200}

##### APP variables

#stat APP
**.udpApp[0].startTime = truncnormal(5s, 1s)
**.udpApp[0].sendInterval = 2s

#burst APP
**.udpApp[1].messageLength = ${ML=uniform(512B,51200B), 512B, 5120B, 51200B}
**.udpApp[1].sendInterval = ${SI=uniform(0.1s,2s), 0.1s, 1s, 2s}
**.udpApp[1].startTime = truncnormal(10s, 2s)

##### NET variables
**.routerType = "${RT=AODVRouter, GPSRRouter}"
#**.routerType = ${RT="AODVRouter", "GPSRRouter", "DYMORouter"}

##### PHY variables
**.wlan[*].radio.transmitter.power = ${TP=uniform(10mW,100mW),10mW,50mW,100mW}


output-vector-file = ${resultdir}/${configname}/${RT}/${NH}-${ML}-${SI}-${TP}-${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}/${RT}/${NH}-${ML}-${SI}-${TP}-${runnumber}.sca

#**.udpApp[0].fileStat = ${FS="${resultdir}/${configname}/AODVRouter/${NH}-${ML}-${SI}-${TP}-${runnumber}.data", "${resultdir}/${configname}/GPSRRouter/${NH}-${ML}-${SI}-${TP}-${runnumber}.data" ! RT} 
**.udpApp[0].fileStat = "${resultdir}/${configname}/${RT}/${NH}-${ML}-${SI}-${TP}-${runnumber}.data"


[Config TestMobStationaryMobility]
extends = TestBase
description = "TestMobStationaryMobility"
**.host*.mobilityType = "StationaryMobility"
# place it at a random position:
**.host*.mobility.initFromDisplayString = false



[Config TestMobStaticGridMobility]
extends = TestBase
description = "TestMobStationaryMobility"
**.host*.mobilityType = "StaticGridMobility"
**.host*.mobility.marginX = 100m
**.host*.mobility.marginY = 100m
**.host*.mobility.numHosts = ${NH}





[Config TestMobChiangMobility]
extends = TestBase
description = "TestMobChiangMobility"
**.host*.mobilityType = "ChiangMobility"
**.host*.mobility.stateTransitionUpdateInterval = ${STUI=uniform(1s, 5s)}
**.host*.mobility.speed = ${SP=uniform(1mps, 50mps)}





[Config TestMobCircleMobility]
extends = TestBase
description = "TestMobCircleMobility"
**.host*.mobilityType = "CircleMobility"
**.host*.mobility.cx = 2500m
**.host*.mobility.cy = 2500m
**.host*.mobility.r = uniform(500m, 2000m)
**.host*.mobility.speed = uniform(1mps, 50mps)
**.host*.mobility.startAngle = uniform(0deg, 360deg)





[Config TestMobConstSpeedMobility]
extends = TestBase
description = "TestMobConstSpeedMobility"
**.host*.mobilityType = "ConstSpeedMobility"
**.host*.mobility.initFromDisplayString = false
**.host*.mobility.speed = uniform(1mps, 50mps)





[Config TestMobGaussMarkovMobility]
extends = TestBase
description = "TestMobGaussMarkovMobility"
**.host*.mobilityType = "GaussMarkovMobility"
**.host*.mobility.alpha = uniform(0.01, 0.99)
**.host*.mobility.speed = uniform(1mps, 50mps)
**.host*.mobility.angle = uniform(0deg, 360deg)
**.host*.mobility.variance = uniform(20, 50)
**.host*.mobility.margin = 30m




[Config TestMobLinearMobility]
extends = TestBase
description = "TestMobLinearMobility"
**.host*.mobilityType = "LinearMobility"
**.host*.mobility.initFromDisplayString = false
**.host*.mobility.speed = uniform(1mps, 50mps)
**.host*.mobility.angle = uniform(0deg, 360deg)  # degrees
#**.host*.mobility.acceleration = -0.5




[Config TestMobMassMobility]
extends = TestBase
description = "TestMobMassMobility"
**.host*.mobilityType = "MassMobility"
**.host*.mobility.initFromDisplayString = false
**.host*.mobility.changeInterval = truncnormal(2s, 0.5s)
**.host*.mobility.changeAngleBy = normal(0deg, 40deg)
**.host*.mobility.speed = uniform(1mps, 50mps)




[Config TestMobRandomWPMobility]
extends = TestBase
description = "TestMobRandomWPMobility"
**.host*.mobilityType = "RandomWPMobility"
**.host*.mobility.initFromDisplayString = false
**.host*.mobility.speed = uniform(1mps, 50mps)
**.host*.mobility.waitTime = uniform(2s,15s)
